name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
            env:
              BUILD_TYPE: Debug
              CMAKE_GENERATOR: Xcode
#          - os: self-hosted
#            env:
#              BUILD_TYPE: Debug
#              MACOSX_DEPLOYMENT_TARGET: 10.15
#              CMAKE_GENERATOR: Xcode

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Add brew packages
      if: ${{ contains( matrix.os, 'macos' ) }}
      shell: bash
      run: brew install automake autoconf cmake

    - name: Python dep
      run: |
        ./build_cpython.sh
        PY_ROOT=`./pythonbuild/bin/python3 -c "import sys, os;print(os.path.abspath(sys.base_prefix))"`
        echo "CMAKE_OPTIONS=-DPython3_ROOT_DIR=$PY_ROOT" >> $GITHUB_ENV

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} $CMAKE_OPTIONS

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Pack
      if: ${{ matrix.os != 'ubuntu-latest' }}
      working-directory: ${{github.workspace}}/build
      run: cpack -V -C ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -VV
